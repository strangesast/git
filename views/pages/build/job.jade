extends ../nav_workspace

block top
  .container
    .picture
    .information
      h1=job.name
      p id: #{job._id}
      p description: #{job.description ? job.description : '(no description)'}
      p owner: #{job.owner.name} 
        a(href='/app/user/#{job.owner.username}') (#{job.owner.username})

block navigation
  .search
    input(type='text', placeholder='search')
  .controls
    .left
      - var classes = ['fa-bookmark-o', 'fa-building-o', 'fa-cubes']
      - var kinds = ['phase', 'building', 'component']
      - var cnt = kinds.map((k)=>options[k + 'Enabled']).filter((k)=>k==null||k).length;
      - console.log(cnt)
      each kind, i in kinds
        - var other = kinds.filter((k)=>k!=kind)
        - var enabled = options[kind + 'Enabled']
        - var qstr = other.map((k)=>options[k+'Enabled']!=null && !options[k+'Enabled'] ? k+'Enabled=0' : '').concat(enabled == null || !!enabled ? kind + 'Enabled=0' : '').filter((e)=>e!='').join('&')
        - var c = classes[i]
        // if last active, disable de-activation
        a.icon(href=(enabled == null || enabled) && cnt == 1 ? false : '?' + qstr, class=enabled==null||enabled?'active':'')
          span(class=c).fa.fa-lg
          span=kind[0].toUpperCase()+kind.slice(1)
  
    .right
      a.icon(href='#')
        span.fa.fa-filter.fa-lg
        span Filters


block workspace
  .container
    .search-box
      .search-result One
      .search-result Two
      .search-result Three
      .search-result Four
      .search-result Five

    .tree
      if tree.length
        each branch in tree
          - var obj = included[branch['type'] + 's'][branch['_id']]
          div.tree-element(level=branch.level)
            span.icon.fa(class=(branch.type == 'phase' ? 'fa-bookmark-o' : branch.type == 'building' ? 'fa-building-o' : 'fa-cubes'))
            span.name=obj.name
            span #{branch.level} #{branch.type} #{obj.name}
            if branch.type == 'component'
              span  (#{included[branch['type'] + 's'][branch['_id']].parts.length} Parts)

            span.icon.fa.fa-angle-right
              
      else
        p Tree empty.

div
  h1 Components
  h2 Phases
  if phases.length
    each phase in phases
      div(id=phase._id)
        h3 #{phase.name}
        small #{phase._id}
        p Parent: #{phase.parent ? phase.parent.name : 'null'}
        span Description:
        if phase.description
          p=phase.description
        else
          p
            i (no description)
  else
    p No phases

  if user && user._id.equals(job.owner)
    form(name='new-phase', method='post', action='/api/jobs/#{job._id}/phases')
      label(for='new-phase-name-input') Name
      br
      input#new-phase-name-input(name='name', type='text')
      br
      label(for='new-phase-parent-input') Parent
      br
      select#new-phase-parent-input(name='parent', type='text')
        option(value='') null
        each phase in phases
          option(value=phase._id)=phase.name
      br
      label(for='new-phase-description-textarea') Description
      br
      textarea(name='description')
      br
      button(type='submit') Submit

div
  h2 Buildings
  if buildings.length
    each building in buildings
      div(id=building._id)
        h3 #{building.name}
        small #{building._id}
        p Parent: #{building.parent ? building.parent.name : 'null'}
        span Description:
        if building.description
          p=building.description
        else
          p
            i (no description)
  else
    p No buildings

  if user && user._id.equals(job.owner)
    form(name='new-building', method='post', action='/api/jobs/#{job._id}/buildings')
      label(for='new-building-name-input') Name
      br
      input#new-building-name-input(name='name', type='text')
      br
      label(for='new-building-parent-input') Parent
      br
      select#new-building-parent-input(name='parent', type='text')
        option(value='') null
        each building in buildings
          option(value=building._id)=building.name
      br
      label(for='new-building-description-textarea') Description
      br
      textarea(name='description')
      br
      button(type='submit') Submit


div
  h2 Components
  if components.length
    each component in components
      div(id=component._id)
        h3 #{component.name} 
        small #{component._id}
        p Parent: #{component.parent ? component.parent.name : 'null'}
        p Phase: #{component.phase ? component.phase.name : 'null'}
        p Building: #{component.building ? component.building.name : 'null'}

        span Description:
        if component.description
          p=component.description
        else
          p
            i (no description)
        p Parts
        table(id='#{component._id}-parts')
          tr
            th Core Part
            th Name
            th Description
            th Qty
            th Price

          if component.parts.length
            each part in component.parts
              tr
                td=((part.part in parts) ? parts[part.part].description : part.part)
                td=part.name
                td=part.description
                td=part.qty
                td=part.price
          else
            tr
              td No parts

        if user && user._id.equals(job.owner)
          p Add part
          form(action='/api/components/#{component._id}/parts', method='post')
            label Part List
              input(name='part', list='part-catalog-list')
            button(type='submit') Submit

  else
    p No Components

  datalist#part-catalog-list
    -for(var part in parts)
      option(value=part)=parts[part].description

  if user && user._id.equals(job.owner)
    form(name='new-component', method='post', action='/api/jobs/#{job._id}/components')
      label(for='new-component-name-input') Name
      br
      input#new-component-name-input(name='name', type='text')
      br
      label(for='new-component-phase-input') Phase
      br
      select#new-component-phase-input(name='phase', type='text')
        option(value='') null
        each phase in phases
          option(value=phase._id)=phase.name
      br
      label(for='new-component-building-input') Building
      br
      select#new-component-building-input(name='building', type='text')
        option(value='') null
        each building in buildings
          option(value=building._id)=building.name
      br

      label(for='new-component-parent-input') Parent
      br
      select#new-component-parent-input(name='parent', type='text')
        option(value='') null
        each component in components
          option(value=component._id)=component.name
      br
      label(for='new-component-description-textarea') Description
      br
      textarea(name='description')
      br
      button(type='submit') Submit

if user && user._id.equals(job.owner)
  form(name='job', method='post', action='/api/jobs/#{job._id}')
    input(type='hidden', name='_id', value=job._id)
    label(for='job-name-input') Name
    br
    input#job-name-input(name='name', type='text', value=job.name)
    br
    label(for='job-shortname-input') Short name (used for url)
    br
    input#job-shortname-input(name='shortname', type='text', value=job.shortname)
    br
    label(for='job-description-textarea') Description
    br
    textarea#job-description-textarea(name='description')=job.description
    br
    button(type='submit') Submit

