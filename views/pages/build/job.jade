extends ../nav_workspace

block top
  include description

block navigation
  include navigation_bar

block workspace
  .container#workspace
    .search-box
      each result in queryResult
        .search-result
          .description #{result.description}
          //.price List Price: #{result.list_price}
          //.price NYS Price: #{result.nysprice}
          form(name='add-component', method='post', action='/api/jobs/#{job._id}/components')
            input(type='hidden', name='part', value=result.version_id)
            label Name
            input(type='text', name='name', value=result.description)
            br
            label Phase
            select(name='phase', type='text')
              each phase in phases
                option(value=phase._id)=phase.name
            br
            label Building
            select(name='building', type='text')
              each building in buildings
                option(value=building._id)=building.name
            br
            button(type='submit') Add

      if options.phaseEnabled == null || options.phaseEnabled
        .search-result
          h3 New Phase
          form(name='new-phase', method='post', action='/api/jobs/#{job._id}/phases')
            label(for='new-phase-name-input') Name
            br
            input#new-phase-name-input(name='name', type='text')
            br
            label(for='new-phase-parent-input') Parent
            br
            select#new-phase-parent-input(name='parent', type='text')
              option(value='') null
              each phase in phases
                option(value=phase._id)=phase.name
            br
            label(for='new-phase-description-textarea') Description
            br
            textarea(name='description')
            br
            button(type='submit') Submit

      if options.buildingEnabled == null || options.buildingEnabled
        .search-result
          h3 New Building
          form(name='new-building', method='post', action='/api/jobs/#{job._id}/buildings')
            label(for='new-building-name-input') Name
            br
            input#new-building-name-input(name='name', type='text')
            br
            label(for='new-building-parent-input') Parent
            br
            select#new-building-parent-input(name='parent', type='text')
              option(value='') null
              each building in buildings
                option(value=building._id)=building.name
            br
            label(for='new-building-description-textarea') Description
            br
            textarea(name='description')
            br
            button(type='submit') Submit

      if options.componentEnabled == null || options.componentEnabled
        .search-result
          h3 New Component
          form(name='new-component', method='post', action='/api/jobs/#{job._id}/components')
            label(for='new-component-name-input') Name
            br
            input#new-component-name-input(name='name', type='text')
            br
            label(for='new-component-phase-input') Phase
            br
            select#new-component-phase-input(name='phase', type='text')
              option(value='') null
              each phase in phases
                option(value=phase._id)=phase.name
            br
            label(for='new-component-building-input') Building
            br
            select#new-component-building-input(name='building', type='text')
              option(value='') null
              each building in buildings
                option(value=building._id)=building.name
            br

            label(for='new-component-parent-input') Parent
            br
            select#new-component-parent-input(name='parent', type='text')
              option(value='') null
              each component in components
                option(value=component._id)=component.name
            br
            label(for='new-component-description-textarea') Description
            br
            textarea(name='description')
            br
            button(type='submit') Submit


    .tree#tree
      .tree-filters
        if options.rootBuilding != null
          div
            a(href='?').remove
              span.fa.fa-close.fa-lg
            span Buildings 
            span.fa.fa-angle-right.fa-lg
            span #{included['buildings'][options.rootBuilding].name}

        if options.rootPhase != null
          div
            a(href='?').remove
              span.fa.fa-close.fa-lg
            span Phases 
            span.fa.fa-angle-right.fa-lg
            span #{included['phases'][options.rootPhase].name}
      if tree.length
        each branch in tree
          - var obj = included[branch['type'] + 's'][branch['_id']]
          - var qstring = ['phase', 'building'].filter((t)=>t!=branch.type).map((a)=>'root' + a[0].toUpperCase() + a.slice(1)).map((el)=>options[el] != null ? el + '=' + options[el] : '').filter((el)=>el!='');
          div.tree-element(level=branch.level)
            span.icon.fa(class=(branch.type == 'phase' ? 'fa-bookmark-o' : branch.type == 'building' ? 'fa-building-o' : 'fa-cubes'))
            a(href="/app/edit/#{branch.type + 's'}/#{obj._id}").hoverstyle
              span.name=obj.name
            if branch.type !== 'component'
              a(href='?' + qstring.concat('root'+branch.type[0].toUpperCase()+branch.type.slice(1)+'='+obj._id).join('&')).nostyle
                span.fa.fa-angle-right.fa-lg
            span.description=obj.description
            if branch.type == 'component'
              span.partcnt  (#{included[branch['type'] + 's'][branch['_id']].parts.length} Parts)

            span.spacer

            span.icon.fa.fa-angle-right
              
      else
        p Tree empty.

      template
        .tree#tree
          .tree-filters
            div(rv-if='model:rootPhase')
              span.fa.fa-close.fa-lg.remove
              span Phases
              span.fa.fa-angle-right.fa-lg
              span { model:rootPhase }
            div(rv-if='model:rootBuilding')
              span.fa.fa-close.fa-lg.remove
              span Buildings
              span.fa.fa-angle-right.fa-lg
              span { model:rootBuilding }
          .tree-element(rv-each-branch='model.tree')
            span.icon.fa(class='branch.type | icon_class')
            a(fa-href='branch._id') { branch._id }
            span.spacer
            span.icon.fa.fa-angle-right
           

block template

block scripts
  script(src='/components/backbone/backbone-min.js')
  - var newline_escape = (str) => str.replace(/\\r\\n/g, '\\\r\\\n').replace(/\\r/g, "\\r").replace(/\\t/g, "\\t").replace(/\\b/g, "\\b").replace(/\\f/g, "\\f");
  };
  - console.log(newline_escape(JSON.stringify(job)))
  script.
    var PREFETCH = {};
    PREFETCH.job = JSON.parse('!{newline_escape(JSON.stringify(job))}');
    PREFETCH.phases = JSON.parse('!{newline_escape(JSON.stringify(phases))}');
    PREFETCH.buildings = JSON.parse('!{newline_escape(JSON.stringify(buildings))}');
    PREFETCH.components = JSON.parse('!{newline_escape(JSON.stringify(components))}');

  script(src='/javascripts/build.js')
