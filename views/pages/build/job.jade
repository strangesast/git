extends ../nav_workspace

block top
  include description

block navigation
  include navigation_bar

block workspace
  .container#workspace
    include search_results

    .tree#tree
      .tree-filters
        if options.rootBuilding != null
          div
            a(href='?').remove
              span.fa.fa-close.fa-lg
            span Buildings 
            span.fa.fa-angle-right.fa-lg
            span #{included['buildings'][options.rootBuilding].name}

        if options.rootPhase != null
          div
            a(href='?').remove
              span.fa.fa-close.fa-lg
            span Phases 
            span.fa.fa-angle-right.fa-lg
            span #{included['phases'][options.rootPhase].name}
      if tree.length
        each branch in tree
          - var obj = included[branch['type'] + 's'][branch['_id']]
          - var qstring = ['phase', 'building'].filter((t)=>t!=branch.type).map((a)=>'root' + a[0].toUpperCase() + a.slice(1)).map((el)=>options[el] != null ? el + '=' + options[el] : '').filter((el)=>el!='');
          div.tree-element(level=branch.level)
            span.icon.fa(class=(branch.type == 'phase' ? 'fa-bookmark-o' : branch.type == 'building' ? 'fa-building-o' : 'fa-cubes'))
            a(href="/app/edit/#{branch.type + 's'}/#{obj._id}").hoverlink
              span.name=obj.name
            if branch.type !== 'component'
              a(href='?' + qstring.concat('root'+branch.type[0].toUpperCase()+branch.type.slice(1)+'='+obj._id).join('&')).nostyle
                span.fa.fa-angle-right.fa-lg
            span.description=obj.description
            if branch.type == 'component'
              span.partcnt  (#{included[branch['type'] + 's'][branch['_id']].parts.length} Parts)

            span.spacer

            span.icon.fa.fa-angle-right
              
      else
        p Tree empty.

      template
        .tree#tree
          .tree-filters
            div(rv-if='model:rootPhase')
              span(name='phase').fa.fa-close.fa-lg.remove
              span Phases
              span.fa.fa-angle-right.fa-lg
              span { model.rootPhase | call model:rootPhase }
            div(rv-if='model:rootBuilding')
              span(name='building').fa.fa-close.fa-lg.remove
              span Buildings
              span.fa.fa-angle-right.fa-lg
              span { model.rootBuilding | call model:rootBuilding }
          template#tree-element-template
            .tree-element(rv-level='branch.level', draggable='true', tabindex=1)
              span.icon.fa(rv-class='branch.type | icon_class')
              a.hoverlink.name(tabindex=-1, rv-href='model | getURL')
                span { model:name }
              .icon.hoverstyle.root(rv-if='branch.type | != "component"')
                span.fa.fa-angle-right.fa-lg
              span.description(rv-if='model:description') { model:description }
              span.spacer
              span.icon.fa.fa-angle-right
           

block template

block scripts
  script(src='/components/backbone/backbone-min.js')
  - var newline_escape = (str) => str.replace(/\\r\\n/g, '\\\r\\\n').replace(/\\r/g, "\\r").replace(/\\t/g, "\\t").replace(/\\b/g, "\\b").replace(/\\f/g, "\\f");
  };
  - console.log(newline_escape(JSON.stringify(job)))
  script.
    var PREFETCH = {};
    PREFETCH.job = JSON.parse('!{newline_escape(JSON.stringify(job))}');
    PREFETCH.phases = JSON.parse('!{newline_escape(JSON.stringify(phases))}');
    PREFETCH.buildings = JSON.parse('!{newline_escape(JSON.stringify(buildings))}');
    PREFETCH.components = JSON.parse('!{newline_escape(JSON.stringify(components))}');

  script(src='/javascripts/build.js')
